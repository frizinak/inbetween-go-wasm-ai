// Code generated for package bound by go-bindata DO NOT EDIT. (@generated)
// sources:
// bind/weights1.txt
package bound

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _weights1Txt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x57\xc9\xb1\xae\x3b\x0a\xdb\xdf\x5c\xfa\x14\x42\x0c\x22\xff\xc4\xba\xe4\xef\x7f\x5b\x97\x47\xd0\xe4\xff\xc5\x1f\x4b\xc1\x29\xc4\x22\x36\x75\xff\xfe\x17\x7f\x59\x15\xc4\x1c\x70\x33\x2b\xfc\x8b\x3f\xe6\x00\x27\xa0\x97\xa5\x06\x3d\x0f\x7d\x9b\xc3\x53\xc6\xac\xc8\xf9\x17\x7f\x71\x8c\x9d\xeb\xc4\xce\x2d\xa6\xff\xc5\x1f\xb2\xaf\x75\xd5\x51\xbc\x29\xc9\x8b\x9b\x57\xc4\x32\x5b\x15\x85\xf6\x58\x15\x58\x77\xab\xed\x1a\xdc\x7a\x8c\x39\x5b\x33\x55\xd7\xe3\x4b\x7d\xf3\xa6\xaf\x82\xac\x64\xc5\xdb\x8e\x7b\x37\x6c\x86\x22\xb4\xf1\xee\x37\x2c\x44\x45\xfa\x6a\xbc\x6f\x25\x62\xb7\x77\xa9\x12\xba\xf2\x5f\xfc\xe5\xf6\x76\xd5\x0c\x66\xbb\x4b\x6f\x69\xdf\xc6\x6e\x22\x47\xea\xbd\xf1\x58\x14\x11\xcb\xcd\xcd\x5b\xf5\xe2\x0d\x2e\x2e\x29\x62\x14\x44\xb5\x5c\xac\xc2\x1c\xb9\xd2\x46\xc4\xba\x2c\xd0\x46\xe3\x8a\x15\x0d\xd4\xbe\xa7\xf9\x34\xe9\xa2\x3a\xa5\xdc\x7a\xef\x98\x43\x15\x8e\x35\x9a\x92\xd7\xf2\x66\xd1\x7d\x3c\x76\xb1\xde\x7e\xc1\xb8\x01\xc5\xa2\xaf\xa4\xe2\xd7\x38\x65\x16\xc8\x43\xd4\x36\x5c\xfc\xd8\xad\xbe\xac\xbc\xcd\xad\xe9\x37\xd1\xfd\x5a\x62\x20\x75\x40\xe5\x2d\x67\x12\x3d\x05\x95\x58\xdf\xe3\x78\x31\x62\x1c\xb7\xe7\x36\xdf\x05\x97\x68\x20\x7d\x95\x40\x84\xc1\x81\xc2\x85\x0b\x1b\xcd\xbe\xe6\x37\x0f\xb5\xc2\x44\x4f\xdc\xa1\xf3\x9d\xa0\x42\x90\x9d\x8d\x1c\x96\x97\x5e\x45\xa2\xbb\x4e\xba\x9d\x7e\x37\x56\x62\xef\x8a\x97\x8d\x18\x7a\xa8\x3b\x4e\x5b\x40\x47\x28\xae\xbd\x96\xbb\x0d\xe8\x46\xd7\x17\x33\x5f\xdf\xe4\xf2\x06\x2f\x32\xa9\x37\x86\x8b\xcb\x3d\xe5\x0e\xaf\x7a\xbe\x0a\xdc\x4c\xec\xcc\x14\xce\xa8\xf3\x29\x20\xa2\x2f\xd8\x77\x46\xce\xb9\x2a\x29\xbe\x1b\xe7\x8a\xc2\x96\x0f\xce\x99\x8c\x88\x54\xe7\xa2\xe5\xa7\x01\x1b\x39\xd0\x1e\xa7\xb4\x5f\x09\x54\xac\x9b\x41\xa1\xa3\xd4\xaf\x97\x43\xa5\x1f\xc1\xab\x45\xe3\xe1\x40\xab\xe1\xed\x4c\xa0\xb6\xf5\xc1\xfe\x3a\x92\xdd\x5a\x1f\xdb\x1f\x38\x14\x19\x88\x34\x4d\x3a\x2a\x5e\x01\x51\x82\xc1\xb2\x49\x1a\x64\x1f\x28\xcf\x7d\x6d\x22\xb7\xbd\x91\x4f\xc6\xc8\xc8\x05\xe8\x9e\xb8\x6f\xb5\x75\xb9\x3b\x73\x23\xa4\xf2\xe3\xf4\xfa\x75\x9d\x18\x66\xe4\xbc\xc7\xa9\x07\x15\xb5\xe9\x62\xc5\xbe\x33\xfc\x56\x25\x0e\xd9\xba\xbc\xfa\x1d\x8c\x00\xb7\x2f\x69\xc6\xe6\x7b\xb2\x46\x3a\x69\x36\x3a\xa7\x9e\x4a\x64\xec\xae\x29\xc6\xca\xca\xc2\x3b\x5a\x83\xe2\xe1\xac\x12\xb9\xed\x8e\x90\xbd\x59\x51\x94\x4a\xfd\x8e\x68\x5c\x87\xb7\xd1\x85\x32\x3e\xc1\x3a\xdd\xdd\xa5\x77\x90\xab\xee\xc7\x45\xe6\x74\xf0\x2c\x43\x81\xf5\x6e\xb1\x13\x16\x26\x50\xe8\x5e\x8f\x45\x85\x44\x65\xcf\x9a\xb4\xe9\xa5\x63\x12\xa1\xf2\xa6\xcb\xfc\xf2\x6e\x1c\x64\x65\x08\x55\x56\x1a\xaf\x74\xfb\xc2\x60\x3e\x84\x26\xe0\x52\x6d\xed\xae\x0b\x87\x1b\x35\x1f\x3b\x62\x99\x3c\xec\xb4\xea\xfa\x5e\x33\x7a\xdb\x3c\xea\x52\x8e\x3e\xe8\x72\xa9\x8e\x3e\x0b\xaa\x29\xf0\x0d\x76\x77\x72\x66\x59\xc8\xef\x76\x7d\xdc\x41\x17\x73\x8f\x7c\x8c\x31\x40\xeb\xd5\xb3\x09\xeb\xb9\xa7\x59\x02\x8c\xd3\x73\xdf\xc6\xba\x14\xe9\xfa\xc2\x1a\x91\x9c\x9e\x7b\xa0\xca\xd0\xa4\x3b\x84\x56\x28\x3e\xfd\x23\x78\x97\x5b\x9d\x88\x43\xa6\x4f\x49\xe6\x7b\x5a\x4d\x92\x08\xe9\x35\x12\x37\xf4\x6e\x44\xed\x47\xad\x89\x85\xa2\xe2\x4e\xe1\xe1\x9f\x3c\xe7\xe4\x57\x97\x95\xea\xc7\xd5\x20\x56\x28\x8e\x51\xef\x59\x61\x49\xbf\xca\x34\x0e\xeb\x03\x78\xf7\x5a\x5f\x94\x91\xac\xf7\x0e\x13\x6d\x6d\x4f\x44\x26\xf0\xba\x91\x16\xae\x46\x66\x4c\x06\x4f\xcf\x78\x22\x6b\x35\x97\xac\x3c\xcc\x03\x73\xcd\x4d\xd5\x22\x6f\x91\x99\x3e\x36\x6f\x82\xd7\xe7\x12\x32\x73\x3c\xd6\xd1\xc3\x51\xec\xf4\x1a\x23\x4f\x49\xb9\x55\xeb\xcb\x9a\x9d\xa7\x4f\x9b\xf3\x2a\x8e\x2e\x2b\xfb\x5e\x01\xb6\x03\x63\x33\xf1\x11\xfc\xd8\x67\x29\xb8\xae\xda\x8a\xa8\xdd\x7a\x56\x59\x23\x25\x15\x00\xbb\xe7\x23\x81\x14\xad\x47\x41\x6b\xe7\xbd\x33\xe0\x7e\x1b\x2b\x25\x7d\x70\xbc\x5e\x63\xfb\x3a\x4d\x4b\x3d\x5c\x30\xe2\x50\x78\x24\xbd\x67\x6d\x93\x85\xce\xe6\xb8\x93\x7b\xaf\x87\xa5\x07\xbe\x6c\x7a\xe1\x23\xd9\xd5\xc5\x54\x77\xae\x61\xf4\x11\xd9\x28\x13\xee\x9e\x5a\x3c\x0d\x9e\xb6\x46\x4c\x63\xae\xc4\xa7\x0b\x4c\x02\xf6\x3f\xd6\x56\x7f\xd6\xc2\x62\x57\xb3\x2b\x76\x35\xf9\xac\xa5\xd2\xb1\x20\xc5\x06\x02\xaf\xd5\x88\xb6\xd5\x80\x47\x4c\x68\xf5\xa6\xd9\xd5\x67\xa6\xb7\x8e\x9f\x5f\x67\xda\x70\xb9\xa5\xc0\x7d\xba\x5f\x36\xef\x6b\xf0\x96\xd1\xfa\x6c\x29\x7c\x19\x5e\x43\xda\x6b\xcd\x23\x7c\x5a\x24\x9e\xd7\x20\xe6\xf8\xc1\xd3\xac\xbb\x38\xf3\xd3\x4a\xfd\xec\xa5\x38\x96\x09\x75\xf7\x0c\xbe\x30\xc2\xbe\xb1\x72\x45\x04\xab\xf2\xa7\xca\xa5\xab\xe5\x76\x39\xbe\xbc\xc5\xf6\xd4\xd2\xae\xe2\xb6\xe7\xc3\x71\xdc\x11\x0b\xcc\x44\xba\xec\xe8\x31\xfe\x34\x16\x0b\xe0\x19\x73\xee\x75\xb4\x38\x64\x9f\x95\xeb\xab\x3b\x9c\x68\xf2\xae\xae\x9d\x9e\x7c\xa8\xb8\xd7\x45\x46\xb0\x23\xe2\x79\xe4\x04\x30\xd7\x9b\x93\x28\x6d\x3e\x00\x34\xe2\xac\xb1\x13\x13\xf3\x99\xbf\x0e\x61\xc4\x56\xca\xd2\xff\x2c\x57\x65\x9b\xba\xd9\xe2\xf1\x61\x67\x3b\x8f\x36\x81\x8b\xbe\x7e\x95\x07\xe3\x54\x3d\x00\xad\x79\xdf\xed\xee\xba\x21\xc4\x93\x25\x3c\x58\x64\x34\x03\xdd\xc3\x98\x33\x40\x9e\xcb\x2d\xd6\xc5\x38\x71\x36\xbe\xda\x15\x6b\xb8\x01\x2b\xea\xde\x59\x1a\x25\xc4\x9e\x29\x1b\x13\xfd\x85\x31\x61\x08\x33\x2c\x43\x8f\x26\xc8\x26\x90\x01\x54\xb9\x80\x2f\x21\xd4\x46\xb6\x19\x5d\xd2\xf2\xed\xff\xfc\xde\x75\xce\x0d\xd9\xd8\x1f\xdc\xe7\x3c\x11\xda\x8c\xdb\x2f\x76\x31\x42\xed\x90\xb9\x53\xc9\xfc\xd5\x78\xe5\x68\x1a\xdb\xb9\xf4\xe2\x17\x33\x2f\x14\xa8\xa0\xca\xb1\xf4\x71\xd6\x11\xc9\xb1\xd8\x99\x61\xf6\xf3\x7e\x2b\x58\xb2\x8c\x82\xda\xed\x17\x75\x90\x9a\x78\x05\x01\xe7\x79\x9e\x19\xe0\x9b\x88\x72\x7a\xd2\x73\xd6\xd3\x41\xaa\xbc\xd6\xfe\xb2\xad\x23\x54\x3b\x3d\x6a\xf6\x2b\x31\xa3\x0e\xbe\x04\x89\xfd\x34\xc6\x17\xdb\x99\x47\x02\x61\x9f\xab\xc4\xeb\x6b\x5d\x96\x51\xcf\x8f\x18\x39\xec\xcb\x58\x18\x1b\x88\xa7\xa9\x51\x2e\xa9\x63\x53\xf6\xee\xe9\x29\x83\x7a\x1a\x7b\x8e\x43\x47\xd6\xfc\x4e\xa9\x40\x4d\x19\x3e\xc9\xe3\xf3\x9f\x2f\xec\x87\xc5\x52\xbf\x40\x1e\x4a\xeb\xdb\xce\xf8\x13\xf1\x39\x35\xac\xe5\x5b\x5d\xb7\x61\x1f\x32\x57\xe4\xce\x55\xc3\x3d\xb0\x6c\x7c\xa8\x92\xac\xa2\x6d\x59\xaf\xfb\x42\xdb\xf0\x58\xa9\xaa\x70\x98\xfb\x31\x37\x0a\xbb\x70\xf5\xf4\xee\x8c\x73\xb8\x8d\x3c\xdc\x33\xe3\xdf\x76\x95\x6c\xc9\x2d\x19\xe2\x9b\x28\x10\x0e\xb1\x76\x88\xd8\x78\x79\xf7\xd2\x4b\x1b\x3d\x89\xe8\xfd\xae\xec\xdb\x6a\xe8\x60\xb3\xfa\x72\x89\x9d\xdf\x8c\x47\x29\x46\xf1\xc6\x7a\x75\x74\x6a\xc7\x85\x5d\xfd\x8b\xf3\x21\x47\xc3\x9e\xdc\xb8\xfd\xb2\x67\xb7\xa8\x6d\x4b\x9d\xfe\x5b\x0c\x36\xb1\x86\x2e\xda\x62\xf7\x3d\x18\x9b\xf9\x12\xf2\x26\xf3\xf5\x9d\xad\x51\x1e\x02\xb3\xf7\x0b\xc2\x70\x9c\xb8\x44\xa7\xeb\x37\xf8\x02\x2e\xd6\xb6\x11\x63\xae\xc4\x97\x61\xb4\xe8\xc2\xad\x53\x78\xc5\xf7\x0d\x2b\x66\x84\x30\xb7\xe4\x9a\x80\x17\x66\xe7\x36\xfd\x59\x7b\x19\xa1\xa7\x7a\xc6\x95\x3f\xbb\xdd\x23\xe0\xb2\x71\xa8\x58\x19\x97\x1f\x61\xc2\x5f\xbf\x54\x6a\xdb\x91\xe0\xf7\x79\x91\x43\x6d\x47\xa7\x66\xf4\xa2\x09\x0c\xd8\xca\xcd\xba\x7e\xa2\xf1\x3e\x2f\xfe\x01\x0d\xc6\xa2\xbc\xf7\x61\x32\xfb\xcc\x85\xbb\xdb\x9a\xf8\x1e\x41\xa7\x14\xf3\xba\x1f\xd7\x1f\x01\xdb\x60\x5a\x38\x63\x4a\xae\xab\x2f\x5d\x45\xd9\xd2\x1c\x1c\xf3\xe5\x62\xa7\xba\xa3\x90\x75\xf2\x3f\xf4\xb3\xa6\x98\x52\x3b\x16\x56\xfb\xab\xe6\xda\xc1\x5a\x4d\xaa\xe6\xee\xbf\x4f\x1d\x84\xec\x98\x6c\xa6\xff\x65\x2f\xee\x8d\x1f\x31\x53\xcb\x0a\xec\x47\x37\x87\xbc\x74\x4d\x89\x03\xbf\xc0\x5a\xb5\x69\x74\xa3\xe6\x99\xa4\xd1\xe5\x5f\x67\xbe\x6f\xe8\x07\x00\xfb\x74\xcc\xae\x1c\x23\x82\xf9\xfd\x24\x29\x65\x97\x22\x2b\xfc\xb5\x7d\x3d\x63\xa7\x31\xf7\x7e\x25\x39\xda\xff\x07\x00\x00\xff\xff\x5f\xe7\xf4\xe7\xb2\x0f\x00\x00")

func weights1TxtBytes() ([]byte, error) {
	return bindataRead(
		_weights1Txt,
		"weights1.txt",
	)
}

func weights1Txt() (*asset, error) {
	bytes, err := weights1TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "weights1.txt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"weights1.txt": weights1Txt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"weights1.txt": &bintree{weights1Txt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
