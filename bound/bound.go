// Code generated for package bound by go-bindata DO NOT EDIT. (@generated)
// sources:
// bind/weights1.txt
package bound

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _weights1Txt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x58\x49\x96\xec\x48\x0c\xda\xd7\x5d\x3a\x9f\xd0\xcc\xfd\x2f\xd6\x0f\x85\xff\xb2\x5c\x76\x84\x06\x04\x28\xed\x67\xed\x65\x34\xd8\x5a\xd6\x02\xfd\x67\xbf\x46\x5a\x46\x74\xd0\x22\xd6\xf7\xef\x3f\xfb\xd1\xb7\xa2\x6a\x51\xed\xd6\x13\x7f\xf6\x0b\xf6\x06\xc0\x0d\xc2\xaa\xb7\xfe\xec\x57\xdc\x25\xd6\x7a\x86\xac\xa5\x1e\x99\xa7\xe7\xcc\x4c\xb7\x2f\x53\xa7\xcd\x56\x78\x45\xe8\xc5\x9c\x49\x5d\x5a\x4c\x2c\x7c\x67\x1c\xb1\x77\x29\x8a\xe6\x6c\x84\xa1\x66\xa6\x14\x1c\xb6\x69\x05\xdb\x62\x3a\xec\xe2\x5d\x8f\x66\xb6\x67\x54\xd3\x5d\x9f\xa6\x57\x61\xa2\x98\xe1\x5c\xde\x15\xe1\x86\xa8\x29\x2a\x58\xda\x94\x5e\x2c\x26\xc7\x73\xbb\x7d\x7a\xd7\x75\x1e\x81\xb0\x66\x56\x7a\xe0\xf2\xf2\x46\x47\x0c\xc7\x1d\x16\xa3\xb7\xd0\x15\xd8\xb6\xda\xec\x41\xb9\x4a\xd2\xb3\x31\xed\x31\x36\x5b\xba\xc0\x7e\x1e\xd6\x51\x6b\xbb\xe3\x98\xa4\x02\x71\xdb\xda\x19\xba\xb3\x7b\xb0\x7b\x97\x7a\xa9\xb2\xf4\x08\x27\x54\xb9\xd8\x9c\x89\x2c\x2b\x94\x6f\xa6\x3e\x25\x9d\xb1\x56\xe3\x5e\xe0\x5c\xae\x56\xe1\xe9\x9e\x6d\xe5\x5b\x75\xc7\xa5\xbb\x55\x67\x70\xcd\xb6\xa0\x48\x72\x0b\x3d\xdc\xed\x1e\xfd\xf3\x7d\xda\x3b\x59\x6e\x60\x4c\x92\x79\xed\xe9\x5a\xa7\x0a\xd4\x91\xe9\x7d\x5d\xdc\x71\xe6\x74\x5c\xa9\x1d\xca\x62\x00\xab\x88\x72\x60\xe2\x2b\xa7\x4d\x13\x3a\xbe\xa6\xd7\xcb\x2e\xc0\x8d\xf6\x01\xbd\x16\xbd\xc8\xeb\x6d\x87\x4f\xf7\x56\xb3\x99\x48\x1d\x18\x48\x65\xe9\xae\xfc\x72\x94\x46\x35\x23\x33\x2d\x9c\x69\xb3\x2f\xe6\x68\xaf\x18\x8b\x56\x6f\x23\xa8\x87\x0e\x2b\x9d\x47\x4c\x87\x79\xef\x95\x39\x32\x3b\x33\xe1\xd9\xbe\x31\xd7\x6f\xf3\x17\x5f\xe4\x22\x67\xfe\xec\x67\x6b\x0d\x17\x46\x05\xd0\xe8\x83\x19\xb6\xba\xa3\x6b\x06\x33\x93\x3a\xcf\x06\x03\x21\xc7\x4c\xa3\xb0\x97\x70\xb2\xc6\xdb\x87\x61\xee\xeb\xea\x91\x75\x56\x54\x60\x7a\xe0\xb8\xf2\x4d\x81\x5d\x83\x8c\x32\xb3\x14\x56\x1c\x0b\x66\xd7\x70\x27\x8d\x38\x60\x2c\x7d\x6a\x12\x96\x9c\x19\xbf\xe8\x72\xd3\xb6\xbb\x00\x4f\x16\xbe\x1b\x62\xab\x7c\x36\x9a\xc8\xf9\xea\x22\x50\x0f\xbd\xb3\x2c\xbe\x79\x2c\xa4\xa1\x96\xce\xac\x98\x2b\x55\x0a\xcb\x63\x82\xf4\x94\x5b\xea\xbd\x5d\x84\x39\x19\x1a\x23\xcf\x79\x28\x88\xce\x21\x8d\xd3\x8d\x7a\xed\xed\x08\xcf\x31\x08\xcd\x9e\x71\xe3\x47\x36\xcc\xc6\x7a\x2a\x0b\xaf\xca\x33\x99\x8c\xca\x06\x6b\xfb\x42\x89\x5e\xf7\x8e\x9c\xd0\xf0\x5f\x55\x1c\x97\xbb\x39\xa3\xeb\x0d\xae\x98\x07\xe1\xce\xf2\x98\x74\xa8\x04\xc8\x0c\x5b\x9f\xaa\x44\x67\xfb\x5d\x11\xf4\xdc\x4d\x2a\xd9\xf1\x6b\x5a\xbb\x0a\x4f\xc2\x2d\x66\x5e\x95\x93\x74\xef\xb2\x74\xfa\xf4\x0d\xae\x03\x4a\x35\x62\x0c\x74\xd6\xc3\x8f\xf7\x4c\xf9\xcd\x07\xf2\x15\x54\x8d\x5d\xae\x15\xe1\xde\x0f\xcb\xe8\x4d\x4d\x99\xfe\x15\x69\x2f\x68\x1d\x33\x65\x1d\xde\xc5\xad\x52\xd0\x11\x45\x91\x10\x5a\x3c\xf4\xd1\x48\x94\xbd\x68\x36\xb2\x1f\xdb\x5a\x79\x1a\xd2\x04\xb5\x2b\xf6\x71\x0b\x6a\x3c\x7d\x22\x7c\x81\x47\x9a\x3d\xd9\x70\xd1\x6f\xc0\xb2\xf7\x9b\x5f\xdf\xcd\x28\x67\x67\xe0\xe0\x87\xd9\x8e\x8d\xa5\x27\x37\xf3\x02\x74\xdb\x0c\x77\x9f\x11\xb7\xcc\xbc\x8f\x45\xb8\x9d\x86\x41\xb1\xb7\x1f\x8c\xd0\x96\x3b\x9b\x39\x1c\xf3\x79\x31\x6e\x67\x6d\x8a\xe6\xa7\x8d\x8d\x7b\x11\xcb\xea\x4a\x63\xed\x4e\x5e\x93\x37\x47\x04\xce\xba\x99\xda\xb8\x6b\x44\xe1\xee\x22\x8b\xee\xdc\xa8\x8b\xa8\x9b\x2c\xf7\x98\xf2\xea\xf0\xa3\xc0\x01\x6f\xc0\xf6\xc6\xf5\x3e\x8e\x36\x80\xd1\x61\x89\xb0\x3c\x5a\xcc\x02\x91\x5d\xb9\xa2\x4b\x95\x95\xb3\x6c\xf7\xb1\xc5\xd2\xde\xec\x5b\xae\x87\x21\x82\x59\x73\x9c\x58\x3a\x63\x8b\x55\x8d\x41\x5e\x93\x80\x0e\xa1\x48\x54\xb5\x78\x54\xa2\xff\x0e\xbc\xdb\xbb\x17\x62\xa6\x09\x74\x0b\x8d\x5b\x6e\x15\x57\x11\x54\xb0\xd2\xcc\x21\xbc\xd6\xe9\x66\x60\x68\xad\xe7\x62\x59\x7d\x98\x66\x33\xbd\x86\x00\x36\xaf\x96\x99\x2d\x31\xc4\x6a\x36\x27\x1e\x03\x35\x8d\x68\xb7\x0d\xea\x5d\x65\x20\x9c\x78\x8f\x59\x02\xec\xb9\xea\xb6\x94\xb9\x0c\xb1\x92\xa2\xeb\xc2\x2c\x6c\xd4\x18\x60\x7d\xe3\x91\x57\x92\x6b\x30\x71\x73\xc7\x53\xeb\xf1\x09\xcd\x29\x3b\xf1\xb8\x1a\x9d\x5c\x6f\x69\xa2\xf1\xe1\xc9\x21\x4d\xda\x6c\x84\x58\xe4\x84\xce\x45\x46\x9b\xb5\xcb\x58\xb7\xb8\x17\x13\xe4\x0e\x01\xeb\xe8\xc5\x23\xb4\xf1\x1a\x9b\x1a\xd3\x4c\x7a\xdf\xd0\x4f\x6f\x55\x19\x04\x3d\x7b\xa3\x26\x31\x5b\x09\x96\xd9\xc0\x2c\x3f\x0d\x13\x7b\xb7\xcc\x43\xd8\xc3\xc3\x8c\x4d\xc8\x6c\xc4\xd4\x2e\x5e\xba\x8e\x35\x77\xb3\xc9\xce\xe2\xf5\xa2\x26\x37\x59\x1a\xad\xf8\xe8\x5b\xb3\x98\xd6\xd3\x4f\xc2\xf2\x59\x93\x8c\xac\xf5\x51\x12\xa7\x60\x89\xe8\x11\x3f\x62\x07\x7d\x6e\xa5\x17\x1a\x85\x22\x18\xfa\xcf\xf9\x9c\x5c\x85\xd1\x88\x44\x50\xc7\xaf\xaf\x59\x95\xaf\x53\x9d\x7c\x6c\xb1\x83\xb5\xf5\xa6\x06\xba\xf8\xe6\xce\xd7\x23\x40\x7a\xb0\xd8\x67\x57\x54\xb1\x66\x59\x59\x16\x7d\xce\x11\xc4\x4e\x1b\x48\x88\x5e\x79\xe5\x2c\xeb\xa4\x37\x0a\x72\x2b\xd7\x09\x03\xc7\xcc\xad\x7d\x52\xb2\xfd\x78\xd5\xa1\xc8\xa4\xe0\xb9\x52\x9b\x37\xc3\x3d\x4b\x56\x8f\x09\x77\xf5\x4c\xc7\x46\xf5\xa6\xa5\x3b\xdf\x1d\x6a\x5d\xe9\x5a\xc4\xb6\xed\x23\xe0\x8d\xae\x62\xa3\x5a\x96\xd0\xaf\x2a\x65\x74\x6e\x9e\x78\x3d\x15\xf1\x69\x4e\x5b\x57\x89\xc4\x9f\xc3\x60\x4c\x54\x27\x32\xb3\xea\xa1\x0e\xe6\xd5\xd5\x10\x3f\x6d\x53\xcf\x24\x6d\x5e\x43\xf1\x48\x16\xf7\x1f\xd7\x5a\x61\xb1\x98\x84\xf7\x71\x77\x75\x0b\x2b\xdd\x7a\x5f\x28\x3e\x32\x31\x64\xac\xa7\xb3\x48\x9e\x2e\x23\xca\x77\xa4\x0f\x48\xba\xd5\x81\x36\xda\x7c\xea\x19\xd4\xca\x1b\x1f\x8b\xd0\x83\x66\x9f\xc9\x58\xbb\xa1\x4d\x93\x04\x8d\xb4\x6e\x1a\xfe\x1c\x2b\xd2\xe4\x6a\xd3\xa7\xff\x09\xdf\x62\xba\x2b\x33\x42\xc8\xca\x67\x80\x42\xa6\xb6\x52\x2e\xf1\x0d\x50\xc3\x6d\x6c\x29\xeb\x29\x4a\x7a\x5e\xb4\x99\x9b\x15\xeb\x8c\x13\x9c\x53\x82\x71\xae\x8d\x4b\x10\x79\x8a\xa1\x89\x5d\x64\xf3\x46\xfa\x91\xac\x99\xc9\x9f\x13\x9b\x7b\x0e\xe5\x35\xd8\x4b\x2e\x09\x1d\xd2\xb1\xad\x1b\xa1\x5a\x9a\xc9\xba\x6d\xad\x88\xef\xfc\x44\x08\x27\x0b\x13\x16\x1e\x5e\x26\x18\x2b\x9f\x81\x46\xf3\x2e\x89\x29\x4e\xae\xc5\x8a\x67\x9f\x0c\x48\xde\xdd\x64\xaa\x44\xdf\x9a\xf0\xcb\x44\x24\x35\x2c\x04\x39\x7d\x51\x97\x49\xd2\x58\x35\x32\x20\xcf\xdf\xe6\x78\x48\x71\x01\xb3\xb0\x33\x63\xb1\x63\x62\xcc\x4e\xc4\x6c\x9c\x50\x81\x23\xeb\x07\x98\x26\xa9\x5f\xa1\x0b\xd2\x0f\xcd\x21\xb1\x13\x07\xbf\xce\xd6\x42\x62\x88\x01\x5f\x28\xde\xce\x92\x4e\x8a\xc4\x36\x3e\xd8\xb7\xb5\xc9\x5e\x38\x4c\x6a\x7c\x31\x6f\x1c\x21\xb7\x7c\xd6\xb3\x54\x45\xc9\x59\x27\xc3\x1a\x3c\xb2\xad\x14\x24\xdd\x7a\x4f\x54\x2e\x94\xb6\x66\x1f\xaa\x12\x81\xba\xfe\x56\xb1\x16\x3a\x30\x2a\xf3\xd9\x65\xb7\xd6\x8a\xe1\x5a\x57\x9a\xdb\x4f\xdf\xb2\xc2\xac\xdd\x50\x3d\xf3\x39\x20\x70\xae\x6b\x71\x7e\xef\x60\x55\x32\x17\x62\xc8\x88\xfa\x22\xb6\x60\xca\xc2\xe6\xc2\x31\x73\x55\x76\xcb\x60\x00\x31\x21\x1d\xf1\xf3\xf3\x14\x93\x95\x0c\xd3\xbf\x6d\x46\x1e\x9f\xcd\x09\x4f\x94\xd9\xf3\x31\x72\xad\xd8\x1d\x8a\x96\xe6\x73\x22\x5e\x21\xeb\xaa\x6f\xd3\xf6\x51\xd8\x55\xd4\xb5\x23\x54\x77\xef\xcb\x4e\xf4\xb1\xbc\x8b\x3d\x8d\x4f\x96\x6b\x25\x71\x2e\x8b\x58\x5a\x27\x3e\xa8\xa2\x5c\xf8\xa3\x2e\x13\xa5\xe6\xb7\x12\x74\x54\x9a\x66\x29\x24\x8c\xa7\x8b\x09\x09\x9d\x47\xf7\xf4\xa8\xc9\xa9\x6a\x05\x2c\x5c\xd1\x6f\xd4\x43\x26\x88\x26\xcd\x5c\x01\x5c\x97\xc3\xb2\x43\x56\x30\x72\x5c\x1c\xf5\xf4\xc8\x32\x23\x91\x21\xa4\x87\xea\xb3\xcc\x1d\x9f\xd5\x38\x70\x70\x06\x5e\x12\x98\xd0\x26\xc1\x30\x3e\x20\x55\x6d\x0b\x41\x46\x7d\x11\xcf\x5e\x83\x54\x19\x04\xaf\xbd\x67\xe9\x33\x2a\xd5\x01\x5a\x36\xf9\x52\x23\x5d\x26\x5a\xb3\x69\x66\x8f\xf3\xe5\xfd\x4d\xfe\xa1\xb2\x94\xcc\x21\x3d\x86\xe2\xe7\xc8\xd2\xd8\x3c\x8f\x5c\x32\x65\xdd\x45\x2d\x4f\x2f\x0d\xf3\x94\x95\xa4\x5b\xee\x1e\xa7\x68\x53\xaa\xb5\xf6\x5c\x5a\x5b\x9e\xfe\x38\x98\x04\x3a\x6f\x8f\x7c\xeb\x78\x7a\x68\xab\x91\xd1\xca\x5b\x18\x94\x08\x33\xa4\x0a\x47\xe9\x72\xe8\x07\xfe\x74\xb8\x01\xd8\x99\xe0\x53\xf3\xd1\x84\x80\x72\xac\x93\x4f\xe1\x03\xa1\x19\x59\x21\x65\xea\x81\x3a\x9a\x42\x96\xa8\x42\x66\xff\x51\x72\x48\xe1\x1c\x53\x6d\xea\xf0\x13\x96\x73\x3c\xd2\x4c\x8e\x38\xfe\x61\x13\x7d\x42\x20\xb9\xc8\x39\xcb\x74\xf4\xe9\xc5\x70\x5f\x6a\xc7\xb0\x5f\xc9\x5e\xbb\xd0\xe1\x7a\xeb\x08\x2a\x05\x73\x52\x85\x62\x29\x9c\xd3\x2e\x09\x25\x9a\x8e\xa8\xaa\xc7\x1e\x29\x0a\xad\x01\xb7\x27\x7a\x3f\x0b\x29\x83\x1d\x56\x66\xbb\x5a\x54\xae\xeb\x41\x6a\xfe\xa5\xda\x26\x58\x5e\x65\x7c\xf2\xc8\x5c\xb6\xdf\x1e\x4d\x2b\x7f\x59\x26\xed\xa4\x76\x22\x2c\x72\x63\x7a\x00\xa6\xf5\xfd\xf6\xb1\x18\xa6\x40\x2b\xd9\xdc\xfd\xd0\xe1\xdb\xee\x51\x8c\xbe\x35\x35\xee\x61\xdd\x66\x49\x09\x50\x6b\x33\x7d\x1b\x59\x4e\x05\x57\x9b\x17\xf7\x91\x4f\xf9\xed\xa9\xcb\x8c\x7d\x5e\x4a\x2e\x52\xab\xbe\x35\x93\x6f\x3d\x86\xbc\x51\x4e\x86\x43\x26\xf3\x63\x50\x58\x08\x98\x1e\x29\xa7\xfb\xfd\x80\x63\x70\xa1\x3c\x25\xa7\xda\x55\xee\xe1\xcc\xac\x85\x6c\x4b\x74\xe2\x69\x01\xf3\xec\xf4\x66\x65\xe7\x3f\xde\x4f\x5b\x07\x64\x9f\x64\x0b\x6e\x07\x6d\xa1\xc5\x91\xcb\x4a\xda\xe2\xf9\xce\x58\x69\xa9\x26\x1e\x73\x15\x4c\x6d\x07\x75\x4b\x46\xaa\x4a\xcf\x28\xd3\x8b\x72\x49\xab\xf5\xbf\x6e\xe4\xdc\xb5\xcc\x29\x78\xad\x1a\xa7\xe1\x90\x64\xca\x77\x71\x83\xdf\xbe\x8d\x09\xe6\xa4\x36\x2f\x68\x42\x78\xbf\x09\x31\x6a\xd6\xf4\xb7\x68\xe1\x00\x48\xc3\xf6\x14\x97\x0b\xfb\x2c\x1a\x34\x41\xd0\x12\x0a\x73\x09\xf7\x9d\x98\xae\x9c\x6f\xd5\x9b\x67\x0a\x72\x6b\x0a\x63\x8e\xc9\x66\xbc\x5f\x09\x04\xfd\xfb\x59\x67\xd6\x09\x7b\xc0\x9c\xb6\xf3\x89\x5b\xe1\xf1\x7e\xd9\x88\xfb\x35\x0d\x86\xc4\x11\xf4\x31\x4a\x09\x34\xe7\xb7\x41\x41\xe0\x55\xcb\xd5\x78\xa5\x62\x81\xc7\xe9\x94\x9d\x9b\xd8\xda\xb3\x47\x4f\xd5\x4a\x35\xd7\x3e\x90\x5a\x8b\xae\x23\x88\xdd\x62\x84\x9b\x8c\x50\xfd\x1f\x00\x00\xff\xff\x48\x8e\xcc\x06\xc9\x13\x00\x00")

func weights1TxtBytes() ([]byte, error) {
	return bindataRead(
		_weights1Txt,
		"weights1.txt",
	)
}

func weights1Txt() (*asset, error) {
	bytes, err := weights1TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "weights1.txt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"weights1.txt": weights1Txt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"weights1.txt": &bintree{weights1Txt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
