// Code generated for package bound by go-bindata DO NOT EDIT. (@generated)
// sources:
// bind/weights1.txt
package bound

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _weights1Txt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x98\x4d\x92\xe5\x30\x08\x83\xf7\x7d\x97\xe9\x42\x20\xfe\xee\x7f\xb1\x29\xe1\xf4\x36\x95\x17\xdb\x58\x7c\x12\xcf\x7e\xe1\x08\x06\xba\xc2\x36\x3a\xd2\x7f\xec\xd7\xbc\x6b\xbc\x8c\xd1\x49\x3a\xf4\x2c\x3d\x03\xbd\x95\x64\xac\x7b\xfc\xd8\xef\xf6\xb6\x07\x73\x10\xd5\x1d\xf5\x63\xbf\x51\xc9\xe4\xf4\x20\x33\x6a\x2d\x7e\xfe\xd9\x6f\x70\xc3\x61\xbd\x53\x4d\x56\x97\x1e\x7a\xb0\x02\x3d\xb3\x69\xee\x81\xfd\xb1\x5f\x62\x96\xbe\xc9\x41\x75\x79\xeb\x83\x88\xf4\xb2\x2e\x07\x63\x56\x3b\xf1\xf0\xe9\x71\x43\xe4\xc4\x0c\xb4\xb9\x85\x75\x73\x69\x11\xce\xd0\xb7\x4c\x6b\x0e\x66\x58\x69\x48\x50\x8b\x36\x72\xdc\x7a\xd9\x6c\xaf\xbc\x7d\xec\x46\x06\xb7\xba\xaa\x46\x4b\x5a\x9a\x8f\x99\x76\x16\x93\x8c\xc9\x1f\xfb\xad\xec\xb4\xf2\x89\x06\xac\xf6\x7e\x9a\x85\xaa\xdc\xb0\xae\x70\x6f\xbf\xb3\x46\x95\x63\x12\x0c\xd2\x40\xed\x77\x88\x1e\x15\xd3\xda\xf6\x3d\x5a\x27\xb7\x7d\x69\x3b\xd6\xbc\x8a\x58\xd6\x06\xc2\x13\xed\x66\xe6\xa3\xe3\x93\x66\xd1\xbb\xe8\x20\xc3\xef\xc5\x34\x27\x7b\xcc\x2c\xca\x3d\x54\x13\x2c\x19\x09\xee\x34\x8d\x7b\x87\x75\x44\xa7\x45\x2d\xdb\x7d\x16\xb7\xbd\x19\x64\x8c\x61\xcd\x93\x1d\xb7\x19\x15\xd8\x38\x41\x4b\x0b\x50\xcf\x2c\x16\x34\x2f\xc2\x68\x70\xb4\x7e\xac\x42\x79\x85\xa5\xa1\x3c\x5b\xb5\x62\x4e\x64\x79\xd6\x78\x0f\xef\x73\x91\x40\xde\x32\xb6\xeb\xa5\xeb\xb1\x02\x63\x73\x3a\x73\x8a\xbc\x2a\xf7\x76\x21\xdc\x9c\x55\xb5\xb6\x77\x3d\x6e\x59\xee\xde\x9d\xa3\x5b\xfc\x67\xbf\xb0\x05\xd8\xc6\x0e\xd3\xc5\xe4\x89\xcc\x8d\xf0\xac\xa8\xed\x2e\x2d\x0a\xba\xde\xf2\x4a\x9b\xa5\xdd\xb1\xca\xab\x93\xd8\x44\xef\xbe\xaf\x39\xcb\x33\x57\x97\x93\xf0\xc6\x29\xcc\x39\xdb\xc9\x40\xea\x30\x73\x25\x66\x45\x5b\x64\xed\x66\x33\x4c\x57\x91\x08\x43\x77\x33\x63\xa6\xf7\x94\x6d\x6e\x56\x6e\x35\x30\x8f\xbc\x5f\x4a\x13\xab\xbd\xe4\x6e\x96\xdf\x6b\xb4\x70\x47\x41\x3d\x54\x96\x6f\x2b\xb5\xe9\xe1\xd1\x84\xef\xee\x55\x7d\x8c\x3d\xdd\xb6\xee\xe4\x00\x27\xf6\x8d\x58\x94\xf4\x98\x18\xdd\x75\xb9\xad\x9b\x57\x64\xa7\xcf\x5e\x45\x8c\x36\xbe\x04\x03\x3e\x6a\x44\xb4\x47\xd9\xb8\x99\x47\x84\x9d\x36\xdb\x36\xa5\xa4\x2e\x9f\xf2\x7d\xdb\xed\x76\x55\x62\x77\x54\x73\xbc\x96\xa8\xcd\x9c\x2e\xb7\xe8\x3e\xc1\x36\x38\x48\x46\xa4\x87\x04\xa6\xd7\x26\x03\x39\x61\x0b\x75\x64\x69\x6b\x5b\x69\xc4\xe8\x12\x10\xbc\x26\xc1\x50\x7a\xb3\xac\xe6\xc2\x38\x57\x90\xb6\x98\x48\x23\x53\x52\x3f\xb9\x46\x76\x87\x17\x26\x6a\x73\x5e\x87\x55\x9b\x23\x93\xa5\x7e\x27\x6e\x77\xd6\x30\x60\xbb\x86\xb0\x8c\x13\x93\x47\x81\x23\x3d\x15\x54\xe5\xb9\x0a\xb4\xe5\x54\x94\x31\x23\x2c\xf8\x7e\xbc\x3e\xc0\xa8\x81\xba\x6c\x84\x31\x18\x76\x73\xef\xf2\x8d\x95\x71\xea\x74\xba\x59\xd6\x30\x05\xc1\x3b\x09\x3c\x47\xa0\x99\x59\x34\xf6\x4e\x62\x56\x2a\x32\xa2\xdb\x84\x92\x8d\xbc\x4f\x6e\x84\x70\x91\x20\x6b\x9e\xa6\x32\x20\x69\xee\x16\x6a\xec\xaf\x47\x73\x87\xe1\xba\x79\x95\x36\xee\x7e\x3d\xa7\x67\xd7\x63\x2c\xaf\xa7\x9a\x31\x42\xcf\xb0\xba\xf1\xa8\x0a\x03\x13\x70\x6f\x76\x49\xd0\xd2\xe8\x15\x21\x1b\xb3\x1d\x6e\x0f\x2b\x5d\xce\xa9\x2c\x16\x1a\x4e\xdd\x13\x8b\xbd\x0e\x1c\xe8\xa3\x2a\x6f\x0d\x8f\x9e\xb6\xee\x30\xef\x3c\x9a\xbb\x49\xf0\x0c\xab\xed\xad\xbd\xb6\xc2\xa8\xab\xba\x06\xb9\xec\x27\x98\x84\xca\x02\x04\x6a\x5f\x7b\x7b\x0d\x99\xa1\x55\xf5\x85\xb7\x65\x09\x28\x92\xbe\x45\x78\x1f\x1a\xf4\x60\x27\xb2\xe3\x7a\x55\xe7\xcf\x19\x0b\xea\xf0\xe8\x42\xf5\xc7\xb2\xe9\xaa\xa5\xb5\x41\x9d\xf3\x7c\x05\x41\x77\xeb\x2c\xef\xa8\xb7\x46\xbb\x4c\x2c\x6a\x58\x35\x63\x07\xc7\xa9\x0d\xca\xe8\x50\xd9\x4f\xf7\x40\x6f\x33\x76\xdb\x18\x58\xf7\xb7\x3f\xa6\x59\xae\xe8\x2b\xb4\x1e\x58\x3b\x18\x95\x3a\xbf\xae\xf2\xca\x82\x5e\x49\x0f\x59\xbe\xf1\x88\x9e\x65\x3e\xcc\xda\x9e\xad\xd9\x73\xb3\xdc\xa8\x22\x8d\x55\xc6\xfd\xb8\xe2\x3b\xd3\xed\xda\xe3\xcc\x43\x86\x79\x1a\x4c\x67\xb5\x32\xb3\x47\xea\x72\x03\xd0\x61\x1d\x1c\x3c\x73\x49\x0c\xda\x12\x98\x40\xe7\x6a\x2f\x9c\xd9\xea\x05\xd5\x78\x3d\x4f\xa9\x2e\x52\x4c\x46\xcd\x4c\x7f\x7e\x9b\x41\xeb\x09\x54\xac\x25\xec\xe0\xdd\x96\x3d\x29\x05\x19\xb1\x47\x6a\x3a\x54\x12\x14\xb6\xd1\xc6\x63\x89\xb9\x77\x35\x87\x2c\xc9\xfd\x6e\x04\x3b\x03\x48\x1c\x91\x36\xb4\xeb\x06\x10\x6b\x02\xa0\xd0\x97\x79\xdc\x0c\xa4\x4f\x76\x38\xdc\x24\x9e\xf3\x79\x94\xba\x05\x33\x56\x71\xf1\xc2\x22\xca\xd7\x4c\x38\x94\x7e\xf5\xc8\x48\x12\xeb\xe7\x7c\x6b\x8f\xa5\x31\xda\xbf\xcc\x69\xd7\x2a\xe2\x64\x8a\x4c\xd8\x0e\x53\x16\x70\x9d\x00\x2f\x04\x31\x50\xbf\x59\x3f\x03\xab\xcd\xd0\xa1\x87\x91\xd6\xd8\x87\x22\x2f\xab\xc2\xb4\x47\x23\xee\xc0\x69\x5b\x93\x3d\x2b\x7d\xf4\x19\xb1\x36\x06\xd8\x74\xb0\x68\xed\x57\x17\xcc\x6e\x7a\x79\x74\xaf\xcd\x2d\x61\x13\x01\x7d\x2f\x84\x92\x89\x7a\x42\xad\x4d\x6b\xe5\xa6\xde\x8a\x3f\x04\x2a\x9e\x44\x27\x14\x02\x5e\x3e\x29\x0a\xf3\x55\xd1\x4d\xeb\xeb\x86\xe8\x0c\x13\xac\xd2\x97\xfd\xca\x6c\xed\x9b\xae\xdd\x8c\x6a\xf5\xa9\x48\x55\x9f\x6e\x45\x80\xc1\x50\x85\x4e\xb5\x6f\x80\x92\x6e\x4f\x5f\x01\xd7\xca\x23\x6d\xd3\xbb\xb2\xe7\x75\x52\xce\x2e\xdd\x18\x81\xb1\x43\x44\xe4\x7a\x86\x65\xa4\x38\x7f\xe7\xad\x1e\xae\x1e\x8f\xa1\xd2\x8e\xd0\xb1\xe4\x08\x76\x4b\x39\xaf\x34\x74\x11\xcf\x23\x06\xf0\xe5\x19\x5b\x6f\x96\xb4\xac\x78\x27\x67\x7a\x5a\xf1\x4a\x08\x5d\x5d\x26\x32\xbd\x54\x28\x8d\x38\x1a\x0c\x8b\xc7\x71\x9d\x66\x94\xb5\x98\xb9\x27\x5c\x0b\xac\x7e\x29\x05\x94\xd1\xe7\x8a\x47\x8e\xbb\x83\x30\x47\xb8\x3f\x0e\xf7\x8b\x85\xbe\x92\xea\x33\xa4\x45\xa8\xec\x13\x16\xc3\xf4\x33\x5e\x96\xa3\x6d\x2c\x09\xf6\x9e\x30\x42\x36\xb1\xdc\xa9\xe8\x08\xaf\x3e\x92\x64\xb7\x76\x43\x75\x88\xc5\x17\xd1\x62\x46\x9a\x14\x12\x51\x4f\xa5\xb9\xd9\x61\xf0\xcd\x5e\xc3\xbb\x21\xa8\x26\x0c\xa5\x66\xbd\x77\x55\xae\x45\xca\xff\xd5\x2c\xdf\x6b\x0a\x9e\x39\x01\x49\xef\x56\x15\x02\xc4\x38\x25\xb6\x15\x86\xce\x90\x47\x04\x8d\xe0\xac\x1f\x09\x3c\x21\xcf\xb6\xa1\xfc\xb7\xf2\x60\xcd\x72\x1f\x30\xab\xd2\x8b\xdf\x65\xdb\x22\x0b\xc9\xb5\xcd\xbc\x6e\x29\xa5\x1a\xcc\x94\x5e\x8a\x78\xd9\x86\x3d\xa2\xab\x75\xd7\x36\xcf\x23\xe8\x8b\x49\x7a\xed\x32\xa2\xbf\x24\x5f\x4a\x21\x22\xb0\x0b\x8a\x7c\x21\x50\xb9\xb0\x13\x09\x39\xeb\x6b\xf0\x55\xc2\x64\x16\xd8\x79\xb4\x69\x26\x9b\xd3\x2c\xc4\xd8\xeb\x0b\xbb\x66\x51\xae\xb2\xdd\xf0\x3c\xe2\x56\xd0\x89\x55\x12\xd3\x21\xf7\xc0\x6c\xc9\xed\xa8\x52\x40\x4a\xff\x48\xda\x5b\x70\x1c\x45\xe5\x66\x37\xcc\x8c\x0d\x13\x36\x6b\x95\x74\x7f\x69\xa3\x67\x6d\x64\x74\x3b\xd1\xcf\xcb\x59\xb2\x9c\x60\x97\x71\x72\xf6\x62\xbf\x89\xb5\xea\xa9\x50\x4a\x50\x4d\x2f\x56\xb6\xa7\x42\x84\xf7\x7c\xeb\x82\x2b\xe7\x34\xe6\xd1\xf2\x59\xa0\xf9\xe5\x76\x05\x90\x9a\xcb\x47\x9c\x69\xe7\x06\x8f\xd5\x52\x99\x5c\xd2\x46\x8e\xdd\xaf\x52\x6a\xec\x74\x9e\x0d\x22\x0d\xf3\x0d\x07\xbe\xe1\x25\xbf\x09\x41\xe2\x70\x31\x49\xdb\x18\xa5\xae\x30\xc6\x1f\x06\xa0\x8c\xd7\x88\x50\x22\xf9\x1e\x76\xa7\x5b\x78\xb8\xcd\xf6\x83\x0d\x50\xdb\x56\x6a\x8d\xf5\x17\xfd\xe8\x18\x33\x87\xeb\x94\x93\xb8\x1e\x1a\x71\x2a\xd1\xbd\xee\x8b\x47\xb4\x14\xcc\x14\xd5\xce\x48\xdf\x2a\xf4\xa8\xad\x39\xcd\xab\xcb\x5e\xf4\x55\x96\xec\x9d\x28\xc7\x97\x39\xad\xbc\x4b\xae\x43\x5f\x75\xec\x41\xc3\x51\x19\xed\x21\xe8\xca\xe3\xcf\xcb\xd7\x1b\x97\x0d\x70\x37\xf2\x99\xa5\x02\x9b\x72\x83\x86\x2c\x9c\xc3\x17\xa6\x26\xb5\x4d\x2a\xf3\xbd\x6e\x63\x97\xd4\x9f\x77\xff\xdf\x76\x64\xa0\x83\xb1\xa9\x29\xd8\x3e\x86\x69\x40\x1c\x9b\x4e\x77\x67\x38\x3e\x8e\xdf\xa5\x36\xb3\x62\xfe\x06\x3e\x8d\x83\x9a\x57\x23\x5d\xdf\x7c\x53\xc6\x28\x42\xa4\x99\x58\x69\x71\xa3\xa7\x1d\x4a\x22\x34\x46\xbe\x34\x7a\xdb\xae\x6a\xfd\xdc\x50\xfd\x5a\xdd\x93\x0a\x4c\xd6\x9e\xa9\x66\xbb\x74\x41\x59\x5d\x2b\x1b\x53\x03\x42\xdd\x17\x5b\x81\x2e\x4b\x99\x20\xf3\x64\x0d\xf8\xc4\x2a\x15\x65\x14\xbe\xb0\xe7\x33\xea\x29\xc5\xbd\xae\xa7\x39\x27\x48\x1f\xb9\xa0\x47\x7b\xc5\x63\x6a\x6b\x1a\xd5\xd4\x86\xb8\x11\xda\x64\x2f\xbd\xba\xe9\x5e\xe3\xbc\x60\xe7\x90\x79\xc2\xd7\x85\xb8\xb8\xcf\x39\x43\xa3\xa1\x4b\x72\x7d\x8f\x24\xc1\x85\x0b\xca\xb0\x33\x7d\xab\xba\x50\x27\xcf\xf4\xf4\xb9\xe2\x97\x51\x81\xa3\x34\x98\x69\xae\xbf\x0b\xf1\x05\x92\x99\xb1\x32\xf0\xf7\xd0\x83\x19\x9a\x70\x14\x15\x3d\x3f\x25\x55\xee\x56\xb3\x0a\x82\x65\x3e\x25\xa5\x92\xa2\x56\xca\x76\x3c\x0f\x89\x11\xdf\x4c\xf8\x0d\x05\xc3\x83\xc5\xd0\x6c\xb7\x31\x61\xc8\x37\x70\xb8\x21\x2e\x61\xf9\x84\xf4\xf1\xdd\x08\x32\x82\x99\xd4\xe0\xfb\x9e\x75\x5c\x10\xe0\x28\xd0\xf7\xbc\xf3\x65\x6e\x43\x69\x54\x89\xe0\x9c\x7a\x50\x81\xa1\xc4\xe1\xb2\x25\xad\x5b\x17\x1e\xd1\x8c\xd6\x70\xbb\x0f\xac\x6c\xe5\xb7\x11\x71\xb1\xb8\x01\x2e\x79\xe3\x4a\xd8\xb0\xb8\xf6\x42\x3f\x94\x28\xdb\xab\x06\xc4\x1b\x73\x73\x7c\x47\xfe\x21\xb5\xbc\xe0\x99\x51\xa1\x75\xd2\x36\x2e\xb6\xa3\x46\xf8\xd2\xfc\x92\xbb\x9f\xed\xc7\x38\x66\x42\xa1\x4b\x93\xec\x93\x90\x6a\xef\x13\x6a\x3a\x0e\xcf\x32\x95\x31\x62\xf6\x86\xe4\x69\x74\xfe\xd9\x99\xaa\x57\x7a\x8b\x17\x88\xbc\xa6\x12\x1a\xb6\xab\x32\xf3\x26\x97\x88\x0a\x13\xcb\x15\x57\x94\x39\xee\xde\x36\x46\x60\x1c\xe1\xc7\xe3\xae\x68\x88\x24\xb2\xca\xa9\x79\x99\x2f\xdc\x2e\xfc\x86\x8f\x8a\xad\x77\x45\x44\x47\xaf\x59\x76\x41\x9b\x3e\x4f\xf3\x64\xf2\x10\xc2\xd0\x9e\xde\x60\x7f\x54\x28\x77\x68\xee\x7a\x8a\xb1\xe8\x55\x54\x5f\x6a\x32\x5e\xd6\x1b\x8c\xd5\xd4\x14\xd5\x15\x5d\x5b\x67\x51\x32\x2e\x6a\x18\x92\x8d\xbd\x3f\x99\x14\xb2\x03\x2b\x54\x54\x24\xff\x72\x17\x4b\xc9\x47\x55\xd4\xc4\xfc\xb2\xac\xae\xc0\x14\x5b\xcb\xd3\xaf\x5e\x5b\x4e\xcd\xe6\x36\xb3\x3e\x07\x05\xb8\xc2\x4f\xa8\x62\xd1\x85\x0f\xc1\x3e\xae\x1b\xd0\x0c\xc6\xbd\xd4\xbb\xae\xc4\x27\x49\x5a\xd7\x33\x04\x52\xe6\xa8\x18\x43\xb4\x1d\x10\x5c\xa2\xe7\x78\x6c\xd7\xd6\x46\xfe\x0f\x00\x00\xff\xff\xf6\xb8\x3b\xf5\xc9\x13\x00\x00")

func weights1TxtBytes() ([]byte, error) {
	return bindataRead(
		_weights1Txt,
		"weights1.txt",
	)
}

func weights1Txt() (*asset, error) {
	bytes, err := weights1TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "weights1.txt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"weights1.txt": weights1Txt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"weights1.txt": &bintree{weights1Txt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
